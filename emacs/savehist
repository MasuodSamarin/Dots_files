;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(woman-topic-history org-read-date-history yes-or-no-p-history minibuffer-history tmphist buffer-name-history extended-command-history evil-ex-history file-name-history))
(setq org-read-date-history '("   "))
(setq yes-or-no-p-history '("yes" "no" ":yes" "y"))
(setq minibuffer-history '("/usr/bin/zsh" "company-racer" "ample" "solarized" "molokai" "paganini" "monochrome" "sensores sick" "solarized-dark" "ample-light" "ample-flat" "ample-theme" "zenburn" "zenburn-theme" "darktooth" "darktooth-theme" "dichromacy" "doom-themes" "dracula" "dracula-theme" "tao-yin" "tao-yang" "gruber-darker" "gruber-darker-theme" "planet" "planet-theme" "monochrome-theme" "molokai-theme" "minimal" "minimal-theme" "greymatters" "greymatters-theme" "firebelly" "firebelly-theme" "busybee" "busybee-theme" "boron" "boron-theme" "resultado" "PlantUML" "graphviz" "tabla con dias y horarios" "lista de tareas pendientes personales" "Lista de tareas pendientes de IACI" "Lista de tareas diarias" "lista de telefonos" "datos personales" "lista de mails" "algunos datos personales" "link" "org-bullets" "tao-theme" "paganini-theme" "cyberpunk" "tango" "tsdh-dark" "leuven" "misterioso" "solarized-light" "default" "wombat" "Proyecto Maquina" "formato de links en org-mode" "leyendo un csv en C" "respuesta de StackOverflow"))
(setq buffer-name-history '("config.org" "arrays_test.hs" "init.el" "main.rs" "*GNU Emacs*" "dia_a_dia.org" "proyecto_maquina.org" "read_CSV.c" "TODO.org" "personal_tasks.org" "resumen_Free_OSEK.org" "ejemplo_uso_recursos_en_interrupciones.oil" "init.vim" "*scratch*" "mails.org" "dia_dia_todos.org"))
(setq extended-command-history '("term" "package-list-packages" "toggle-truncate-lines" "package-install" "package-menu-mark-upgrades" "load-theme" "comment-box" "comment-region" "uncomment-region" "org-update-statistics-cookies" "what-line_only_number" "what-line" "org-store-link" "artist-mode" "what-cursor-position"))
(setq evil-ex-history '(#("q" 0 1 (ex-index 1)) #("e Dropbox/Org_mode_files/Personal_org_mode_files/lalala.txt.gpg" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45) 45 46 (ex-index 46) 46 47 (ex-index 47) 47 48 (ex-index 48) 48 49 (ex-index 49) 49 50 (ex-index 50) 50 51 (ex-index 51) 51 52 (ex-index 52) 52 53 (ex-index 53) 53 54 (ex-index 54) 54 55 (ex-index 55) 55 56 (ex-index 56) 56 57 (ex-index 57) 57 58 (ex-index 58) 58 59 (ex-index 59) 59 60 (ex-index 60) 60 61 (ex-index 61) 61 62 (ex-index 62) 62 63 (ex-index 63)) #("vsplit term" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("e ~/.emacs.d/config.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23)) #("e arrays_test.hs" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16)) #("cd" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("term" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("e src/transformations.jl" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("e bang_bang.hs" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14)) #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("e src/main.rs" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("cargo-process-run" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17)) #("e src/lib.rs" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12)) #("cd Repos" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8)) #("se nowrap" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("e src/matrix4x4.rs" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18)) #("w" 0 1 (ex-index 1)) #("cd ~/Dev" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8)) #("sl;dkfjasdlk" 0 1 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 1) 1 2 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 2) 2 3 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 3) 3 4 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 4) 4 5 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 5) 5 6 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 6) 6 7 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 7) 7 8 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 8) 8 9 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 9) 9 10 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 10) 10 11 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 11) 11 12 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 12)) #("bd" 0 1 (ex-index 1) 1 2 (ex-index 2))))
(setq file-name-history '("~/Dev/Haskell_play/arrays_test.hs" "~/Dropbox/TODO_12_08.org" "~/.emacs.d/config.org" "~/Dev/Haskell_play/" "~/.emacs.d/init.el" "~/.emacs.d/custom.el" "~/Repos/Robotics/" "~/Repos/retina/src/lib.rs" "~/Repos/Haskell_work/" "~/Dropbox/Org_mode_files/Personal_org_mode_files/TODO.org" "~/Repos/Remember/Haskell/remember_haskell.org" "~/Repos/darknet/" "~/Repos/huffman-rs/" "~/Repos/huffman-rs/src/main.rs" "~/Repos/robotics-zero/" "~/Repos/robotics-zero" "~/Repos/robotics-zero/src/lib.rs" "~/Dev/Rust_play/image-processing-test/src/" "~/Dev/Rust_play/image-processing-test/src/main.rs" "~/Dev" "~/Repos/Rust_work/mandelbrot-set/src/main.rs" "~/Dev/Rust_play/array_test/src/main.rs" "~/Dev/Rust_play/array_test/" "~/Dropbox/Org_mode_files/Personal_org_mode_files/lalala.txt.gpg" "~/Dropbox/Proyectos/Proyecto_Maquina/Presupuesto/sensores_a_utilizar.csv" "~/C_work/read_CSV.c" "~/Dropbox/Proyectos/Proyecto_Maquina/Embedded/Tasks/Tasks_diagram_generation/states.txt" "~/Dropbox/Org_mode_files/Programacion_org_mode_files/Python/ejemplo_de_tablas_panda.org" "~/Dropbox/TODO.org" "~/.config/nvim/init.vim" "~/.emacs.d/config.p" "~/C_work/factorial.c" "~/C_work/simple_compressor_RLE.c"))
(setq kill-ring '("ig1Raicoe2toopohzuecheiz9luiqu8ia3fei" #(" " 0 1 (font-lock-face default fontified t)) #(" " 0 1 (font-lock-face default fontified t)) #(" " 0 1 (font-lock-face default fontified t)) #(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) #("(load-theme 'solarized t)
" 0 26 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler))) #("#+end_src
" 0 9 (face org-block-end-line font-lock-multiline t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler)) 9 10 (face org-block-end-line fontified t yank-handler (evil-yank-line-handler))) #("
" 0 1 (rear-nonsticky t fontified t yank-handler (evil-yank-line-handler))) #("#+begin_src emacs-lisp
" 0 22 (face org-block-begin-line font-lock-multiline t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler)) 22 23 (face org-block-begin-line font-lock-multiline t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler))) #("
" 0 1 (rear-nonsticky t fontified t yank-handler (evil-yank-line-handler))) #("#+end_src
" 0 9 (face org-block-end-line font-lock-multiline t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler)) 9 10 (face org-block-end-line fontified t yank-handler (evil-yank-line-handler))) #("#+begin_src emacs-lisp
" 0 22 (fontified t font-lock-fontified t yank-handler (evil-yank-line-handler)) 22 23 (fontified t yank-handler (evil-yank-line-handler))) #("#+begin_src emacs-lisp
" 0 22 (face org-block-begin-line font-lock-multiline t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler)) 22 23 (face org-block-begin-line font-lock-multiline t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler))) #("
" 0 1 (rear-nonsticky t fontified t yank-handler (evil-yank-line-handler))) #("(require 'rust-mode)
(define-key rust-mode-map (kbd \"TAB\") #'company-indent-or-complete-common)
(setq company-tooltip-align-annotations t)
" 0 1 (fontified t yank-handler (evil-yank-line-handler)) 1 8 (face font-lock-keyword-face fontified t yank-handler (evil-yank-line-handler)) 8 10 (fontified t yank-handler (evil-yank-line-handler)) 10 19 (face font-lock-constant-face fontified t yank-handler (evil-yank-line-handler)) 19 52 (fontified t yank-handler (evil-yank-line-handler)) 52 57 (face font-lock-string-face fontified t yank-handler (evil-yank-line-handler)) 57 97 (fontified t yank-handler (evil-yank-line-handler)) 97 101 (face font-lock-keyword-face fontified t yank-handler (evil-yank-line-handler)) 101 139 (fontified t yank-handler (evil-yank-line-handler))) #("
" 0 1 (yank-handler (evil-yank-line-handler))) #("(require 'rust-mode)
(define-key rust-mode-map (kbd \"TAB\") #'company-indent-or-complete-common)
(setq company-tooltip-align-annotations t)
" 0 1 (fontified t yank-handler (evil-yank-line-handler)) 1 8 (face font-lock-keyword-face fontified t yank-handler (evil-yank-line-handler)) 8 10 (fontified t yank-handler (evil-yank-line-handler)) 10 19 (face font-lock-constant-face fontified t yank-handler (evil-yank-line-handler)) 19 52 (fontified t yank-handler (evil-yank-line-handler)) 52 57 (face font-lock-string-face fontified t yank-handler (evil-yank-line-handler)) 57 97 (fontified t yank-handler (evil-yank-line-handler)) 97 101 (face font-lock-keyword-face fontified t yank-handler (evil-yank-line-handler)) 101 139 (fontified t yank-handler (evil-yank-line-handler))) #("
" 0 1 (yank-handler (evil-yank-line-handler))) #("
" 0 1 (fontified t yank-handler (evil-yank-line-handler))) #("
" 0 1 (rear-nonsticky t fontified t yank-handler (evil-yank-line-handler))) #("
" 0 1 (rear-nonsticky t fontified t yank-handler (evil-yank-line-handler))) #("
" 0 1 (yank-handler (evil-yank-line-handler))) #("
(require 'rust-mode)
(define-key rust-mode-map (kbd \"TAB\") #'company-indent-or-complete-common)
(setq company-tooltip-align-annotations t)
" 0 2 (fontified t yank-handler (evil-yank-line-handler)) 2 9 (face font-lock-keyword-face fontified t yank-handler (evil-yank-line-handler)) 9 11 (fontified t yank-handler (evil-yank-line-handler)) 11 20 (face font-lock-constant-face fontified t yank-handler (evil-yank-line-handler)) 20 53 (fontified t yank-handler (evil-yank-line-handler)) 53 58 (face font-lock-string-face fontified t yank-handler (evil-yank-line-handler)) 58 98 (fontified t yank-handler (evil-yank-line-handler)) 98 102 (face font-lock-keyword-face fontified t yank-handler (evil-yank-line-handler)) 102 140 (fontified t yank-handler (evil-yank-line-handler))) #(" " 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) #(";" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block))) #(";" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block))) #("  
" 0 3 (fontified t yank-handler (evil-yank-line-handler))) #("
" 0 1 (yank-handler (evil-yank-line-handler) fontified t rear-nonsticky t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) #("; Bootstrap `use-package'
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
; From use-package README
(eval-when-compile
  (require 'use-package))
(require 'diminish)                ;; if you use :diminish
(require 'bind-key)
;; (setq use-package-verbose t)
(server-start)
" 0 2 (yank-handler (evil-yank-line-handler) fontified t face font-lock-comment-delimiter-face) 2 13 (yank-handler (evil-yank-line-handler) fontified t face font-lock-comment-face) 13 24 (yank-handler (evil-yank-line-handler) fontified t face (font-lock-constant-face font-lock-comment-face)) 24 26 (yank-handler (evil-yank-line-handler) fontified t face font-lock-comment-face) 26 27 (yank-handler (evil-yank-line-handler) fontified t) 27 33 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 33 132 (yank-handler (evil-yank-line-handler) fontified t) 132 134 (yank-handler (evil-yank-line-handler) fontified t face font-lock-comment-delimiter-face) 134 157 (yank-handler (evil-yank-line-handler) fontified t face font-lock-comment-face) 157 158 (yank-handler (evil-yank-line-handler) fontified t face font-lock-comment-face) 158 159 (yank-handler (evil-yank-line-handler) fontified t) 159 176 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 176 180 (yank-handler (evil-yank-line-handler) fontified t) 180 187 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 187 189 (yank-handler (evil-yank-line-handler) fontified t) 189 200 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 200 204 (yank-handler (evil-yank-line-handler) fontified t) 204 211 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 211 213 (yank-handler (evil-yank-line-handler) fontified t) 213 221 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 221 238 (yank-handler (evil-yank-line-handler) fontified t) 238 241 (yank-handler (evil-yank-line-handler) fontified t face font-lock-comment-delimiter-face) 241 262 (yank-handler (evil-yank-line-handler) fontified t face font-lock-comment-face) 262 263 (yank-handler (evil-yank-line-handler) fontified t) 263 270 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 270 272 (yank-handler (evil-yank-line-handler) fontified t) 272 280 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 280 282 (yank-handler (evil-yank-line-handler) fontified t) 282 285 (yank-handler (evil-yank-line-handler) fontified t face font-lock-comment-delimiter-face) 285 314 (yank-handler (evil-yank-line-handler) fontified t face font-lock-comment-face) 314 329 (yank-handler (evil-yank-line-handler) fontified t)) #(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) #("
" 0 1 (yank-handler (evil-yank-line-handler) fontified t)) #(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) #(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) #(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) #(";;; Load the config
" 0 4 (yank-handler (evil-yank-line-handler) fontified t face font-lock-comment-delimiter-face) 4 20 (yank-handler (evil-yank-line-handler) fontified t face font-lock-comment-face)) #("(require 'package)
" 0 1 (fontified t yank-handler (evil-yank-line-handler)) 1 8 (face font-lock-keyword-face fontified t yank-handler (evil-yank-line-handler)) 8 10 (fontified t yank-handler (evil-yank-line-handler)) 10 17 (face font-lock-constant-face fontified t yank-handler (evil-yank-line-handler)) 17 19 (fontified t yank-handler (evil-yank-line-handler))) #("
" 0 1 (yank-handler (evil-yank-line-handler) fontified t)) #("; List the packages you want
" 0 2 (yank-handler (evil-yank-line-handler) fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) help-echo nil src-block t) 2 29 (yank-handler (evil-yank-line-handler) fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-face org-block) help-echo nil src-block t)) #("; List the packages you want
(setq package-list '(evil-leader))
" 0 2 (yank-handler (evil-yank-line-handler) fontified t face font-lock-comment-delimiter-face) 2 29 (yank-handler (evil-yank-line-handler) fontified t face font-lock-comment-face) 29 30 (yank-handler (evil-yank-line-handler) fontified t) 30 34 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 34 64 (yank-handler (evil-yank-line-handler) fontified t)) #("
" 0 1 (yank-handler (evil-yank-line-handler) fontified t)) #("
" 0 1 (yank-handler (evil-yank-line-handler) fontified t)) #("
" 0 1 (yank-handler (evil-yank-line-handler) fontified t)) #("; hacemos el puto company global
(add-hook 'after-init-hook  'global-company-mode)
; racer mode
(add-hook 'rust-mode-hook #'racer-mode)
(add-hook 'racer-mode-hook #'eldoc-mode)
(add-hook 'racer-mode-hook #'company-mode)
" 0 2 (yank-handler (evil-yank-line-handler) fontified t face font-lock-comment-delimiter-face) 2 32 (yank-handler (evil-yank-line-handler) fontified t face font-lock-comment-face) 32 33 (yank-handler (evil-yank-line-handler) fontified t face font-lock-comment-face) 33 73 (yank-handler (evil-yank-line-handler) fontified t) 73 83 (yank-handler (evil-yank-line-handler) fontified t) 83 85 (yank-handler (evil-yank-line-handler) fontified t face font-lock-comment-delimiter-face) 85 96 (yank-handler (evil-yank-line-handler) fontified t face font-lock-comment-face) 96 99 (yank-handler (evil-yank-line-handler) fontified t) 99 125 (yank-handler (evil-yank-line-handler) fontified t) 125 136 (yank-handler (evil-yank-line-handler) fontified t) 136 140 (yank-handler (evil-yank-line-handler) fontified t) 140 177 (yank-handler (evil-yank-line-handler) fontified t) 177 203 (yank-handler (evil-yank-line-handler) fontified t) 203 220 (yank-handler (evil-yank-line-handler) fontified t)) #("(ac-config-default)
" 0 19 (yank-handler (evil-yank-line-handler) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 19 20 (yank-handler (evil-yank-line-handler) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) #("
" 0 1 (yank-handler (evil-yank-line-handler) fontified t font-lock-fontified t src-block t)) #("
" 0 1 (yank-handler (evil-yank-line-handler) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) #("
" 0 1 (yank-handler (evil-yank-line-handler) fontified t rear-nonsticky t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) #("
(setq gc-cons-threshold 800000)
(load-theme 'solarized t)
(require 'evil-leader)
(global-evil-leader-mode)
(evil-leader/set-leader \",\")
(evil-leader/set-key
  \"b\" 'switch-to-buffer
  \"w\" 'save-buffer
  \"c\" 'cargo-process-build)
" 0 1 (yank-handler (evil-yank-line-handler) fontified t) 1 2 (yank-handler (evil-yank-line-handler) fontified t) 2 6 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 6 15 (yank-handler (evil-yank-line-handler) fontified t) 15 18 (yank-handler (evil-yank-line-handler) fontified t) 18 33 (yank-handler (evil-yank-line-handler) fontified t) 33 60 (yank-handler (evil-yank-line-handler) fontified t) 60 67 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 67 69 (yank-handler (evil-yank-line-handler) fontified t) 69 80 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 80 132 (yank-handler (evil-yank-line-handler) fontified t) 132 135 (yank-handler (evil-yank-line-handler) fontified t face font-lock-string-face) 135 136 (yank-handler (evil-yank-line-handler) fontified t) 136 137 (yank-handler (evil-yank-line-handler) fontified t) 137 160 (yank-handler (evil-yank-line-handler) fontified t) 160 163 (yank-handler (evil-yank-line-handler) fontified t face font-lock-string-face) 163 167 (yank-handler (evil-yank-line-handler) fontified t) 167 182 (yank-handler (evil-yank-line-handler) fontified t) 182 184 (yank-handler (evil-yank-line-handler) fontified t) 184 187 (yank-handler (evil-yank-line-handler) fontified t face font-lock-string-face) 187 203 (yank-handler (evil-yank-line-handler) fontified t) 203 206 (yank-handler (evil-yank-line-handler) fontified t face font-lock-string-face) 206 229 (yank-handler (evil-yank-line-handler) fontified t)) #(";;; Set up package
(require 'package)
(add-to-list 'package-archives
             '(\"melpa\" . \"http://melpa.org/packages/\") t)
(package-initialize)
" 0 4 (yank-handler (evil-yank-line-handler) fontified t) 4 19 (yank-handler (evil-yank-line-handler) fontified t) 19 20 (yank-handler (evil-yank-line-handler) fontified t) 20 27 (yank-handler (evil-yank-line-handler) fontified t) 27 29 (yank-handler (evil-yank-line-handler) fontified t) 29 36 (yank-handler (evil-yank-line-handler) fontified t) 36 69 (yank-handler (evil-yank-line-handler) fontified t) 69 84 (yank-handler (evil-yank-line-handler) fontified t) 84 91 (yank-handler (evil-yank-line-handler) fontified t) 91 94 (yank-handler (evil-yank-line-handler) fontified t) 94 95 (yank-handler (evil-yank-line-handler) fontified t) 95 120 (yank-handler (evil-yank-line-handler) fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: http://melpa.org/packages/" htmlize-link (:uri "http://melpa.org/packages/") font-lock-multiline t) 120 121 (yank-handler (evil-yank-line-handler) fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: http://melpa.org/packages/" htmlize-link (:uri "http://melpa.org/packages/") font-lock-multiline t) 121 122 (yank-handler (evil-yank-line-handler) fontified t) 122 127 (yank-handler (evil-yank-line-handler) fontified t) 127 147 (yank-handler (evil-yank-line-handler) fontified t) 147 148 (yank-handler (evil-yank-line-handler) fontified t)) #("(setq custom-file (expand-file-name \"custom.el\" user-emacs-directory))
(load custom-file)
" 0 1 (yank-handler (evil-yank-line-handler) font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 1 5 (yank-handler (evil-yank-line-handler) font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil) 5 36 (yank-handler (evil-yank-line-handler) font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 36 47 (yank-handler (evil-yank-line-handler) font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil) 47 89 (yank-handler (evil-yank-line-handler) font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 89 90 (yank-handler (evil-yank-line-handler) font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block))) #("#+begin_src emacs-lisp
(setq custom-file (expand-file-name \"custom.el\" user-emacs-directory))
(load custom-file)
#+end_src
" 0 22 (yank-handler (evil-yank-line-handler) font-lock-fontified t fontified t font-lock-multiline t face org-block-begin-line) 22 23 (yank-handler (evil-yank-line-handler) font-lock-fontified t fontified t help-echo nil font-lock-multiline t face org-block-begin-line) 23 24 (yank-handler (evil-yank-line-handler) font-lock-fontified t fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 24 28 (yank-handler (evil-yank-line-handler) font-lock-fontified t fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 28 59 (yank-handler (evil-yank-line-handler) font-lock-fontified t fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 59 70 (yank-handler (evil-yank-line-handler) font-lock-fontified t fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 70 112 (yank-handler (evil-yank-line-handler) font-lock-fontified t fontified t src-block t font-lock-multiline t face (org-block)) 112 113 (yank-handler (evil-yank-line-handler) font-lock-fontified t fontified t src-block t font-lock-multiline t face (org-block)) 113 122 (yank-handler (evil-yank-line-handler) font-lock-fontified t fontified t font-lock-multiline t face org-block-end-line) 122 123 (yank-handler (evil-yank-line-handler) font-lock-fontified t fontified t face org-block-end-line)) #(";;; Set up package
(require 'package)
(add-to-list 'package-archives
             '(\"melpa\" . \"http://melpa.org/packages/\") t)
(package-initialize)
" 0 4 (yank-handler (evil-yank-line-handler) fontified t face font-lock-comment-delimiter-face) 4 19 (yank-handler (evil-yank-line-handler) fontified t face font-lock-comment-face) 19 20 (yank-handler (evil-yank-line-handler) fontified t) 20 27 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 27 29 (yank-handler (evil-yank-line-handler) fontified t) 29 36 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 36 69 (yank-handler (evil-yank-line-handler) fontified t) 69 84 (yank-handler (evil-yank-line-handler) fontified t) 84 91 (yank-handler (evil-yank-line-handler) fontified t face font-lock-string-face) 91 94 (yank-handler (evil-yank-line-handler) fontified t) 94 122 (yank-handler (evil-yank-line-handler) fontified t face font-lock-string-face) 122 127 (yank-handler (evil-yank-line-handler) fontified t) 127 148 (yank-handler (evil-yank-line-handler) fontified t)) #("Aca pongo:
 - El font que me gusta
 - Seteo
" 0 11 (yank-handler (evil-yank-line-handler) fontified t) 11 34 (yank-handler (evil-yank-line-handler) fontified t) 34 35 (yank-handler (evil-yank-line-handler) fontified t) 35 43 (yank-handler (evil-yank-line-handler) fontified t) 43 44 (yank-handler (evil-yank-line-handler) fontified t rear-nonsticky t)) #("
" 0 1 (yank-handler (evil-yank-line-handler) fontified t rear-nonsticky t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) #("(column-number-mode)
(show-paren-mode)
" 0 20 (yank-handler (evil-yank-line-handler) fontified t) 20 21 (yank-handler (evil-yank-line-handler) fontified t) 21 39 (yank-handler (evil-yank-line-handler) fontified t)) #("
" 0 1 (yank-handler (evil-yank-line-handler) fontified t rear-nonsticky t)) #(";;; Load the config
(org-babel-load-file (concat user-emacs-directory \"config.org\"))
; initialize package.el
(package-initialize)
" 0 4 (yank-handler (evil-yank-line-handler) fontified t face font-lock-comment-delimiter-face) 4 20 (yank-handler (evil-yank-line-handler) fontified t face font-lock-comment-face) 20 70 (yank-handler (evil-yank-line-handler) fontified t) 70 82 (yank-handler (evil-yank-line-handler) fontified t face font-lock-string-face) 82 85 (yank-handler (evil-yank-line-handler) fontified t) 85 87 (yank-handler (evil-yank-line-handler) fontified t face font-lock-comment-delimiter-face) 87 109 (yank-handler (evil-yank-line-handler) fontified t face font-lock-comment-face) 109 130 (yank-handler (evil-yank-line-handler) fontified t)) #("
" 0 1 (yank-handler (evil-yank-line-handler) fontified t)) #("
" 0 1 (yank-handler (evil-yank-line-handler) fontified t rear-nonsticky t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) #("(setq gc-cons-threshold 400000000)
(set-default-font \"mononoki  Nerd Font Mono 13\")
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
" 0 1 (yank-handler (evil-yank-line-handler) fontified t) 1 5 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 5 53 (yank-handler (evil-yank-line-handler) fontified t) 53 82 (yank-handler (evil-yank-line-handler) fontified t face font-lock-string-face) 82 143 (yank-handler (evil-yank-line-handler) fontified t))))
(setq search-ring '("julia-mode" "haskell-mode" "julia" "nerdtree" "evil" "racer" "rust-mode" "blackbo" "virtualenvw"))
(setq regexp-search-ring '("sol" "config" "evil" "pytho" "?"))
